Блоки около 30 ~ 40 мин

Лекция 2. Базовые способы обезопасить себя в многопоточный среде

  1. Visibility (volatile).
    1.1 JMM в общем
    1.2 Основы GC (stop the world)
    1.3 Пример программы с классом (простая програмка объектами разных классов - сколько под разные объекты уходит памяти)
    1.4 Visibility и Happens before
    1.5 Модификатор Volatile (разница с synchronized) и как работает (не подходит для read-update-write)
    1.6 Пример программы (демонстрация работы с volatile и без)
    1.7 Выводы по блоку (сущности JMM, GC и visibility)

  2. Reordering
    2.1 JMM и суть проблемы реордеринга
    2.2 Thread stealing data and non atomic operations
    2.3 JIT focuses (коротко основные кейсы: инлайн, реордеринг и упрощениеи операций)
    2.4 Пример программ
    2.5 Выводы по блоку

  3. Thread Confinement (Stack confinement, ThreadLocal)
    3.1 Постановка задачи - какие проблемы могут встречаться при  многопоточного программирования на java
    3.2 Ad-Hoc Thread Confinement и Stack Confinement, понимание стека вызова JMM (команды и операнды)
    3.3 Концепция Thread Local переменных (ThreadLocal map).
    3.4 Возможные утечки памяти в Thread Local	 	
    3.5 Пример программ (в том числе с утечками памяти)
    3.6 Выводы по блоку

  4. Immutability способ обезопасить себя от проблем с потоками.
    4.1 Про ООП и дизайн
     4.1.1 Блокировки при многопоточном программировании (оптимистичная/пессимистичная), очереди и последовательная блокировка ресурсов
     4.1.2 Избегаем гонок за ресурс
     4.1.3 Используйте локальные переменные
     4.1.4 Используйте пулл потоков
     4.1.5 Используйте утилиты синхронизации вместо wait() и notify()
     4.1.6 Используйте BlockingQueue для реализации Producer-Consumer
     4.1.7 Используйте потокобезопасные коллекции вместо коллекций с блокированием доступа
     4.1.8 Используйте семафоры для создания ограничений
     4.1.9 Используйте блоки синхронизации вместо блокированных методов
     4.1.10 Избегайте использования статических переменных
     4.1.11 Используйте Lock вместо synchronized		
    4.2 Про immutability и почему это хорошо
    4.3 Пример программы
    4.4 Выводы по блоку
